	int loadstring(const uintptr_t ls) {
		const std::string script = r_luaL_checklstring(ls, 1, nullptr);
		if (script.empty()) {
			r_lua_pushnil(ls);
			return 1;
		}
		try
		{
			load_script(ls, L, script);
			return 1;
		}
		catch (const std::exception& ex)
		{
			r_lua_pushnil(ls);
			r_lua_print(3, ex.what());
		}
		return 1;
	}

	int mouse1click_impl(uintptr_t ls) {
		INPUT Inputs[1] = { 0 };
		Inputs->type = INPUT_MOUSE;
		memset(&Inputs->mi, 0, sizeof(MOUSEINPUT));
		Inputs[0].mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_LEFTDOWN;
		SendInput(1, Inputs, sizeof(INPUT));
		Inputs[0].mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_LEFTUP;
		SendInput(1, Inputs, sizeof(INPUT));
		return 0;
	}

	int mouse1press_impl(uintptr_t ls) {
		INPUT Inputs[1] = { 0 };
		Inputs->type = INPUT_MOUSE;
		memset(&Inputs->mi, 0, sizeof(MOUSEINPUT));
		Inputs[0].mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_LEFTDOWN;
		SendInput(1, Inputs, sizeof(INPUT));
		return 0;
	}

	int mouse1release_impl(uintptr_t ls) {
		INPUT Inputs[1] = { 0 };
		Inputs->type = INPUT_MOUSE;
		memset(&Inputs->mi, 0, sizeof(MOUSEINPUT));
		Inputs[0].mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_LEFTUP;
		SendInput(1, Inputs, sizeof(INPUT));
		return 0;
	}

	int mouse2click_impl(uintptr_t ls) {
		INPUT Inputs[1] = { 0 };
		Inputs->type = INPUT_MOUSE;
		memset(&Inputs->mi, 0, sizeof(MOUSEINPUT));
		Inputs[0].mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_RIGHTDOWN;
		SendInput(1, Inputs, sizeof(INPUT));
		Inputs[0].mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_RIGHTUP;
		SendInput(1, Inputs, sizeof(INPUT));
		return 0;
	}

	int mouse2press_impl(uintptr_t ls) {
		INPUT Inputs[1] = { 0 };
		Inputs->type = INPUT_MOUSE;
		memset(&Inputs->mi, 0, sizeof(MOUSEINPUT));
		Inputs[0].mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_RIGHTDOWN;
		SendInput(1, Inputs, sizeof(INPUT));
		return 0;
	}

	int mouse2release_impl(uintptr_t ls) {
		INPUT Inputs[1] = { 0 };
		Inputs->type = INPUT_MOUSE;
		memset(&Inputs->mi, 0, sizeof(MOUSEINPUT));
		Inputs[0].mi.dwFlags = MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_RIGHTUP;
		SendInput(1, Inputs, sizeof(INPUT));
		return 0;
	}

	int HttpGet_impl(uintptr_t ls) {
		const char* arg = r_luaL_checklstring(ls, -1, 0);
		const char* res = URL(arg).c_str();
		r_lua_settop(ls, 0);
		r_lua_pushstring(ls, res);
		return 1;
	}

	int mousemoverel_impl(uintptr_t ls) {
		DWORD x = r_lua_tonumber(ls, -1, 0);
		DWORD y = r_lua_tonumber(ls, -2, 0);

		mouse_event(MOUSEEVENTF_MOVE, x, y, NULL, NULL);

		return 1;
	}

	int keypress_impl(uintptr_t ls) {
		DWORD keycode = r_lua_tonumber(ls, -1, 0);
		keybd_event(0, (BYTE)MapVirtualKeyA(keycode, MAPVK_VK_TO_VSC), KEYEVENTF_SCANCODE, 0);
		return 0;
	}

	int mousemoveabs_impl(uintptr_t ls) {
		DWORD x = r_lua_tonumber(ls, -1, 0);
		DWORD y = r_lua_tonumber(ls, -2, 0);

		HWND activewindow = GetForegroundWindow();
		DWORD x2 = GetSystemMetrics(SM_CXSCREEN);
		DWORD y2 = GetSystemMetrics(SM_CYSCREEN);

		RECT s;
		GetClientRect(activewindow, &s);
		POINT hit = { s.left, s.top };
		ClientToScreen(activewindow, &hit);

		x2 = x2 - 1;
		y2 = y2 - 1;
		x = (0xFFFF / x2) * (x + hit.x);
		y = (0xFFFF / y2) * (y + hit.y);

		mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, x, y, NULL, NULL);

		return 0;
	}

	int checkcaller_impl(uintptr_t ls) {
		r_lua_pushboolean(ls, TRUE);
		return 1;
	}

	int getnamecallmethod_impl(uintptr_t rL) {
		r_StkId& topstack = *(r_StkId*)(rL + 24);
		topstack->tt = 5;
		topstack->value.p = (r_TValue*)(*(uintptr_t*)(rL + 104));
		*(uintptr_t*)((rL)+12) += sizeof(r_TValue);
		return 1;
	}
  
  // I don't know who is this by, but feel free to take it.
